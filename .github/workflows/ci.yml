name: CI

on:
  push:
    branches: ["main", "master"]
  pull_request:
    branches: ["main", "master"]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Install schema tooling
        run: pip install jsonschema

      - name: Validate runtime config schema
        run: |
          python - <<'PY'
          import yaml, sys
          path = "config/runtime.yaml"
          with open(path, encoding="utf-8") as f:
              data = yaml.safe_load(f) or {}
          for key in ("ignition", "telemetry"):
              if key not in data:
                  raise SystemExit(f"{path} missing '{key}' key")
          print("runtime.yaml keys OK")
          PY

      - name: Generate telemetry sample
        run: |
          python scripts/run_quick_loop.py \
            --steps 20 \
            --field_metrics_log tests/fixtures/golden/field_metrics.jsonl \
            --telemetry_log telemetry/ci-run.jsonl

      - name: Run tests with coverage
        run: |
          pytest -q --cov=emot_terrain_lab --cov=devlife --maxfail=1

      - name: Validate fast-path config
        run: python tools/validate_config.py config/fastpath.yaml

      - name: Run nightly summary
        run: python -m emot_terrain_lab.ops.nightly --telemetry_log telemetry/ci-run.jsonl

      - name: Validate nightly JSON schema
        run: |
          python - <<'PY'
          import json, jsonschema
          from pathlib import Path
          data = json.loads(Path("reports/nightly.json").read_text(encoding="utf-8"))
          schema = json.loads(Path("schema/nightly.v1.json").read_text(encoding="utf-8"))
          jsonschema.validate(instance=data, schema=schema)
          print("[CI] nightly.json schema OK")
          PY

      - name: Check nightly plot links
        run: |
          python - <<'PY'
          import pathlib, re, sys
          md_path = pathlib.Path("reports/nightly.md")
          if not md_path.exists():
              raise SystemExit("reports/nightly.md not found")
          content = md_path.read_text(encoding="utf-8")
          paths = re.findall(r'!\[[^\]]*\]\((reports/plots/[^)]+)\)', content)
          missing = [p for p in paths if not pathlib.Path(p).exists()]
          if missing:
              print("[CI] Missing plot files:", missing)
              sys.exit(1)
          print("[CI] nightly.md plot links OK:", paths)
          PY

      - name: Dry-run tuning application
        run: |
          python scripts/apply_nightly_tuning.py \
            --nightly reports/nightly.json \
            --config config/runtime.yaml || true

      - name: Upload nightly artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nightly-report
          path: |
            reports/nightly.md
            reports/plots/*.png
            telemetry/**/*.jsonl
          if-no-files-found: warn

